require NewBullet;

operator entry()
{
  btBroadphaseInterface broadphase = btDbvtBroadphase();
  btDefaultCollisionConfiguration collisionConfiguration();
  btCollisionDispatcher dispatcher(collisionConfiguration);

  btSequentialImpulseConstraintSolver solver();
  btDiscreteDynamicsWorld dynamicsWorld(dispatcher, broadphase, solver,
                                        collisionConfiguration);

  dynamicsWorld.setGravity(btVector3(0, -10, 0));

  btCollisionShape groundShape = btStaticPlaneShape(btVector3(0, 1, 0), 1);

  btCollisionShape fallShape = btSphereShape(1);

  btDefaultMotionState groundMotionState(
      btTransform(btQuaternion(0, 0, 0, 1), btVector3(0, -1, 0)),
      btTransform_getIdentity());
  btRigidBody_btRigidBodyConstructionInfo groundRigidBodyCI(
      0, groundMotionState, groundShape, btVector3(0, 0, 0));
  btRigidBody groundRigidBody(groundRigidBodyCI);
  dynamicsWorld.addRigidBody(groundRigidBody);

  btDefaultMotionState fallMotionState(
      btTransform(btQuaternion(0, 0, 0, 1), btVector3(0, 50, 0)),
      btTransform_getIdentity());
  btScalar mass = 1;
  btVector3 fallInertia(0, 0, 0);
  fallShape.calculateLocalInertia(mass, fallInertia);
  btRigidBody_btRigidBodyConstructionInfo fallRigidBodyCI(
      mass, fallMotionState, fallShape, fallInertia);
  btRigidBody fallRigidBody(fallRigidBodyCI);
  dynamicsWorld.addRigidBody(fallRigidBody);

  for (Integer i = 0; i < 300; i++) {
    //dynamicsWorld.stepSimulation(1 / 60.0, 10, 1 / 60.0);
    dynamicsWorld.stepSimulation(1 / 60.0, 10);

    btTransform trans;
    fallRigidBody.getMotionState().getWorldTransform(trans);

    report("sphere height: " + trans.getOrigin().getY());
  }

  dynamicsWorld.removeRigidBody(fallRigidBody);
  dynamicsWorld.removeRigidBody(groundRigidBody);
}
