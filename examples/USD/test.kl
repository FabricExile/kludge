require USD;

operator entry()
{
  Boolean success;

  UsdStageRefPtr stage;
  {
    UsdStageRefPtr tempStage = UsdStage_CreateNew('HelloWorld.usda');
    stage = tempStage;
  }
  UsdPrim xform;
  {
    UsdPrim tempXform= stage.DefinePrim('/hello', 'Xform');
    xform = tempXform;
  }
  UsdPrim sphere = stage.DefinePrim('/hello/world', 'Sphere');

  UsdGeomXform xform_typed = UsdGeomXform_Get(stage, '/hello');
  TfToken typed_attrs[] = UsdGeomXform_GetSchemaAttributeNames(true);
  for (Integer i=0; i<typed_attrs.size(); i++)
    report('typed_attr:'+typed_attrs[i].GetText());

  UsdAttribute opOrderAttr = xform_typed.GetXformOpOrderAttr();
  TfTokenArray opOrderStr;
  success = UsdAttribute_GetTfTokenArray(opOrderAttr, opOrderStr, UsdTimeCode_Default());
  //success = opOrderAttr.GetTfTokenArray(opOrderStr, UsdTimeCode_Default());
  //report('opOrder = '+opOrderStr);
  report('opOrder.size = '+opOrderStr.size());

  /*
  UsdPrim children[] = xform.GetChildren();
  for (Integer i=0; i<children.size(); i++)
    report('child:'+i+':'+children[i].GetName());
  */

  report('Sphere properties:');
  TfToken propNames[] = sphere.GetPropertyNames();
  for (Integer i=0; i<propNames.size(); i++)
  {
    //UsdAttribute propAttr = sphere.GetAttribute(propNames[i]);
    //report('  '+propNames[i].GetText()+' ('+propAttr.GetTypeName()+')');
    report('  '+propNames[i].GetText());
  }

  UsdAttribute orientationAttr = sphere.GetAttribute('orientation');
  /*
  String orientationVal;
  success = orientationAttr.GetAsString(orientationVal, UsdTime_Default());
  report('orientation = '+orientationVal);
  */

  UsdAttribute extentAttr = sphere.GetAttribute('extent');
  /*
  Vec3 extent[];
  success = extentAttr.GetAsVec3VA(extent, UsdTime_Default());
  report('extent = '+extent);

  extent[0] = 2.5 * extent[0];
  success = extentAttr.SetAsVec3VA(extent, UsdTime_Default());
  */

  UsdAttribute radiusAttr = sphere.GetAttribute('radius');
  //success = radiusAttr.SetAsFloat64(5.75, UsdTime_Default());

  String export;
  stage.GetRootLayer().ExportToString(export);
  report(export);

  stage.GetRootLayer().Save();
}

