{############################################################################}
{# Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.        #}
{############################################################################}
{% extends "generate/decl/decl.impls.kl" %}
{% block body %}
{############################################################################}
{% if record.include_getters_setters or not type_info.is_direct %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////
{%  for member in record.members %}
{%   if member.is_public() %}
{## Getter ##################################################################}
{%    if member.has_getter() %}

/// \dfgPresetOmit
/// \internal
{{member.type_info.kl.name}} {{type_info.kl.name}}.cxx_{{member.getter_kl_name}}()
{%     if type_info.is_direct %}
  = "{{member.get_getter_edk_symbol_name(type_info)}}";
{%     else %}
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of {{type_info.kl.name}}.cxx_{{member.getter_kl_name}} on null {{type_info.kl.name}}";
    return {{type_info.direct.render_indirect_to_direct('this')}}->{ {{record.kl_global_name}} }.cxx_{{member.getter_kl_name}}();
}
{%     endif %}

{% if type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{% endif %}
{{member.type_info.simplifier.result_kl_type_name(member.type_info)}}
{{type_info.kl.name}}.{{member.getter_kl_name}}()
{
    {{member.type_info.simplifier.render_result_decl_and_assign_cxx(member.type_info, '__res') | indent(4)}}
    this.cxx_{{member.getter_kl_name}}();
    {{member.type_info.simplifier.render_result_decl_cxx_to_kl(member.type_info, '__res') | indent(4)}}
    {{member.type_info.simplifier.render_result_return_kl(member.type_info, '__res') | indent(4)}}
}
{%    endif %}
{## Setter ##################################################################}
{%    if member.has_setter() and allow_mutable_methods %}

/// \dfgPresetOmit
/// \internal
{{type_info.kl.name}}.cxx_{{member.setter_kl_name}}!({{member.type_info.kl.name.base}} value{{member.type_info.kl.name.suffix}})
{%     if type_info.is_direct %}
  = "{{member.get_setter_edk_symbol_name(type_info)}}";
{%     else %}
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of {{type_info.kl.name}}.cxx_{{member.setter_kl_name}} on null {{type_info.kl.name}}";
    {{type_info.direct.render_indirect_to_direct('this')}}->{ {{record.kl_global_name}} }.cxx_{{member.setter_kl_name}}(value);
}
{%     endif %}

{% if type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{% endif %}
{{type_info.kl.name}}.{{member.setter_kl_name}}!(
    {{member.type_info.simplifier.param_type_name_base(member.type_info)}}
    {{member.param.value_name.kl}}
    {{member.type_info.simplifier.param_type_name_suffix(member.type_info)}}
   )
{
    {{member.type_info.simplifier.render_param_pre(member.param.type_info, member.param.value_name.kl)|indent(4)}}
    this.cxx_{{member.setter_kl_name}}(
        {{member.type_info.simplifier.param_cxx_value_name(member.param.type_info, member.param.value_name.kl)|indent(8)}}
        );
    {{member.type_info.simplifier.render_param_post(member.param.type_info, member.param.value_name.kl)|indent(4)}}
}
{%    endif %}
{%   endif %}

{%  endfor %}
{% endif %}
{############################################################################}
{% if type_info.is_direct or (type_info.is_const_ref and is_final_record and not type_info.direct.forbid_copy) %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////
{## Empty Constructor #######################################################}
{%  if type_info.is_direct and record.include_empty_ctor %}

{%   if type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{%   endif %}
{%   if record.is_abstract %}
{{type_info.kl.name}}() {
    // throw "Cannot create instance of abstract type {{type_info.kl.name}}()";
}
{%   else %}
{{type_info.kl.name}}() = "{{record.get_empty_ctor_edk_symbol_name(type_info)}}";
{%   endif %}
{%  endif %}
{## Copy Constructor ########################################################}
{%  if type_info.is_direct and record.should_include_automatic_copy_ctor(type_info) %}

/// \dfgPresetOmit
{% if type_info.kl.name.base.startswith('Cxx') %}
/// \internal
{% endif %}
{%   if record.is_abstract %}
{{type_info.kl.name}}(
    {{record.get_copy_param(type_info).render_kl() | indent(4)}}
    ) {
    // throw "Cannot create instance of abstract type {{type_info.kl.name}}()";
}
{%   else %}
{{type_info.kl.name}}(
    {{record.get_copy_param(type_info).render_kl() | indent(4)}}
    ) = "{{record.get_copy_ctor_edk_symbol_name(type_info)}}";
{%   endif %}
{%  endif %}
{## Custom Constructors #####################################################}
{%  if type_info.is_direct and not record.is_abstract and record.should_include_custom_ctors(type_info) %}
{%   for ctor in record.ctors %}

/// \dfgPresetOmit
/// \internal
{{type_info.kl.name}}.__ctor(
    {% for param in ctor.params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    ) = "{{ctor.get_edk_symbol_name(type_info)}}";

{%    for comment in ctor.comments %}
{{comment}}
{%    endfor %}
/// \dfgPresetOmit
{% if type_info.kl.name.base.startswith('Cxx') %}
/// \internal
{% endif %}
{{type_info.kl.name}}(
    {% for param in ctor.params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    ) {
    this.__ctor(
        {% for param in ctor.params %}
        {{param.value_name.kl | indent(8)}}{{"," if not loop.last else ""}}
        {% endfor %}
        );
}
{%   endfor %}
{%    for ctor in record.ctors_to_promote(type_info) %}

{%      for comment in ctor.comments %}
{{comment}}
{%      endfor %}
{% if ctor.dfg_preset_omit or type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{% endif %}
{{type_info.kl.name}}(
    {% for param in ctor.params %}
    {{param.type_info.simplifier.render_param_pass_type(param.type_info)}}
    {{param.type_info.simplifier.param_type_name_base(param.type_info)}}
    {{param.value_name.kl}}
    {{param.type_info.simplifier.param_type_name_suffix(param.type_info)}}
    {{"," if not loop.last else ""}}
    {% endfor %}
    ) {
    {% for param in ctor.params %}
    {{param.type_info.simplifier.render_param_pre(param.type_info, param.value_name.kl)|indent(4)}}
    {% endfor %}
    this.__ctor(
        {% for param in ctor.params %}
        {{param.type_info.simplifier.param_cxx_value_name(param.type_info, param.value_name.kl)|indent(8)}}
        {{- "," if not loop.last else ""}}
        {% endfor %}
        );
    {% for param in ctor.params %}
    {{param.type_info.simplifier.render_param_post(param.type_info, param.value_name.kl)|indent(4)}}
    {% endfor %}
}
{%    endfor %}
{%  endif %}
{## Special Constructors ####################################################}
{%  if not record.is_abstract and type_info.kl.name.compound != 'CxxStdString' and type_info.kl.name.compound != 'CxxStdStringConstRef' %}
{%   if record.has_char_const_ptr_ctor() %}
{#######
{%    if type_info.is_direct %}

{%     if type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{%     endif %}
{{type_info.kl.name}}(String string) {
    this = {{type_info.kl.name}}(CxxCharConstPtr(string));
}
#######}
{%    if type_info.is_const_ref %}

/// \dfgPresetOmit
{{type_info.kl.name}}(String string) {
    this.values.push({{type_info.direct_orig.kl.name}}(CxxCharConstPtr(string)));
    this.ptr = {{type_info.direct.render_get_underlying_ptr('this.values[0]')}};
}
{%    endif %}
{%   elif record.has_std_string_const_ref_ctor() %}
{#######
{%    if type_info.is_direct %}

{%     if type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{%     endif %}
{{type_info.kl.name}}(String string) {
    this = {{type_info.kl.name}}(CxxStdStringConstRef(CxxStdString(string)));
}
#######}
{%    if type_info.is_const_ref %}

/// \dfgPresetOmit
{{type_info.kl.name}}(String string) {
    this.values.push({{type_info.direct_orig.kl.name}}(CxxStdString(string)));
    this.ptr = {{type_info.direct.render_get_underlying_ptr('this.values[0]')}};
}
{%    endif %}
{%   endif %}
{%  endif %}
{## Destructor ##############################################################}
{%  if not record.is_abstract and type_info.is_direct and record.include_dtor %}

{%   if type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{%   endif %}
~{{type_info.kl.name}}() = "{{record.get_dtor_edk_symbol_name(type_info)}}";
{%  endif %}
{% endif %}
{## Delete Function #############################################################}
{% if not record.is_abstract and type_info.is_direct and record.include_delete %}

{%   if type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{%   endif %}
{% endif %}
{% if type_info.is_direct and record.include_delete %}
{{type_info.kl.name}}.cxx_delete() = "{{record.get_delete_edk_symbol_name(type_info)}}";
{% endif %}
{############################################################################}
{% if record.has_methods() %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Methods
//////////////////////////////////////////////////////////////////////////////
{%  for method in record.methods %}
{%   if ((method.is_static and allow_static_methods)
    or (method.is_mutable and allow_mutable_methods)
    or (method.is_const and allow_const_methods))
    and method.is_local_or_virtual_for_owner(type_info) %}

{%    for comment in method.comments %}
{{comment}}
{%    endfor %}
/// \dfgPresetOmit
/// \internal
{{method.result.render_type_kl()}}
{%    if method.is_static %}
{{type_info.kl.name}}_Cxx{{method.clean_cxx_kl_name}}(
{%    else %}
{{type_info.kl.name}}.cxx_{{method.clean_cxx_kl_name}}{{method.this_access_suffix}}(
{%    endif %}
    {% for param in method.params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    )
{%    if type_info.is_direct %}
 = "{{method.get_edk_symbol_name(type_info)}}";
{%    else %}
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of {{type_info.kl.name}}.cxx_{{method.clean_cxx_kl_name}} on null {{type_info.kl.name}}";
    {{method.result.render_return_kl()}}
    {{type_info.direct.render_indirect_to_direct('this')}}->{ {{record.kl_global_name}} }.cxx_{{method.clean_cxx_kl_name}}(
        {% for param in method.params %}
        {{param.value_name.kl | indent(4)}}{{"," if not loop.last else ""}}
        {% endfor %}
        );
}
{%    endif %}
{%   endif %}
{%  endfor %}
{%   for method in record.methods_to_promote(type_info) %}
{%    if ((method.is_static and allow_static_methods)
    or (method.is_mutable and allow_mutable_methods)
    or (method.is_const and allow_const_methods))
    and method.is_local_or_virtual_for_owner(type_info) %}

{%     for comment in method.comments %}
{{comment}}
{%     endfor %}
{% if method.dfg_preset_omit or type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{% endif %}
{{method.result.type_info.simplifier.result_kl_type_name(method.result.type_info)}}
{%     if method.is_static %}
{{type_info.kl.name}}_{{method.clean_kl_name}}(
{%     else %}
{{type_info.kl.name}}.{{method.clean_kl_name}}{{method.this_access_suffix}}(
{%     endif %}
    {% for param in method.params %}
    {{param.type_info.simplifier.render_param_pass_type(param.type_info)}}
    {{param.type_info.simplifier.param_type_name_base(param.type_info)}}
    {{param.value_name.kl}}
    {{param.type_info.simplifier.param_type_name_suffix(param.type_info)}}
    {{"," if not loop.last else ""}}
    {% endfor %}
    )
{   
    {% if method.promotion_prolog %}
    {{method.promotion_prolog | indent(4)}}
    {% endif %}
    {% for param in method.params %}
    {{param.type_info.simplifier.render_param_pre(param.type_info, param.value_name.kl) | indent(4)}}
    {% endfor %}
    {{method.result.type_info.simplifier.render_result_decl_and_assign_cxx(method.result.type_info, '__res') | indent(4)}}
    {% if method.is_static %}
    {{type_info.kl.name}}_Cxx{{method.kl_name}}(
    {% else %}
    this.cxx_{{method.clean_cxx_kl_name}}(
    {% endif %}
        {% for param in method.params %}
        {{param.type_info.simplifier.param_cxx_value_name(param.type_info, param.value_name.kl)}}
        {{- "," if not loop.last else ""}}
        {% endfor %}
        );
    {% for param in method.params %}
    {{param.type_info.simplifier.render_param_post(param.type_info, param.value_name.kl) | indent(4)}}
    {% endfor %}
    {{method.result.type_info.simplifier.render_result_decl_cxx_to_kl(method.result.type_info, '__res') | indent(4)}}
    {{method.result.type_info.simplifier.render_result_return_kl(method.result.type_info, '__res') | indent(4)}}
}
{%    endif %}
{%   endfor %}
{% endif %}
{############################################################################}
{% if record.has_call_ops() %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Call Operators
//////////////////////////////////////////////////////////////////////////////
{%  for call_op in record.call_ops %}
{%   if (call_op.is_mutable and allow_mutable_methods)
    or (call_op.is_const and allow_const_methods) %}

{%    for comment in call_op.comments %}
{{comment}}
{%    endfor %}
/// \dfgPresetOmit
/// \internal
{{call_op.result.render_type_kl()}}
{{type_info.kl.name}}.cxx_call{{call_op.this_access_suffix}}(
    {% for param in call_op.params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    )
{%    if type_info.is_direct %}
 = "{{call_op.get_edk_symbol_name(type_info)}}";
{%    else %}
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of {{type_info.kl.name}}.cxx_call on null {{type_info.kl.name}}";
    {{call_op.result.render_return_kl()}}
    {{type_info.direct.render_indirect_to_direct('this')}}->{ {{record.kl_global_name}} }.cxx_call(
        {% for param in call_op.params %}
        {{param.value_name.kl | indent(4)}}{{"," if not loop.last else ""}}
        {% endfor %}
        );
}
{%    endif %}
{%   endif %}
{%  endfor %}
{% endif %}
{############################################################################}
{% if type_info.is_direct and record.has_uni_ops %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Unary Operators
//////////////////////////////////////////////////////////////////////////////
{%  for uni_op in record.uni_ops %}

{%   for comment in uni_op.comments %}
{{comment}}
{%   endfor %}
{{uni_op.result.type_info.kl.name}}
{{type_info.kl.name}}.{{uni_op.kl_method_name}}!(
    ) = "{{uni_op.get_edk_symbol_name(type_info)}}";
{%  endfor %}
{% endif %}
{############################################################################}
{% if type_info.is_direct and record.has_bin_ops %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Binary Operators
//////////////////////////////////////////////////////////////////////////////
{%  for bin_op in record.bin_ops %}

{%   for comment in bin_op.comments %}
{{comment}}
{%   endfor %}
{{bin_op.result.type_info.kl.name}}
{{bin_op.op}}(
    {{bin_op.params[0].render_kl() | indent(4)}},
    {{bin_op.params[1].render_kl() | indent(4)}}
    ) = "{{bin_op.get_edk_symbol_name(type_info)}}";
{%  endfor %}
{% endif %}
{############################################################################}
{% if type_info.is_direct and record.has_ass_ops %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////
{%  if not record.is_abstract %}
{%   for ass_op in record.ass_ops %}

{%    for comment in ass_op.comments %}
{{comment}}
{%    endfor %}
{{type_info.kl.name}}.{{ass_op.op}}(
    {{ass_op.params[0].render_kl() | indent(4)}}
    ) = "{{ass_op.get_edk_symbol_name(type_info)}}";
{%   endfor %}
{%  endif %}
{%  if record.include_simple_ass_op %}
{%   if record.is_abstract and not record.variant in ["managed"] %}

{{type_info.kl.name}}.=(
    {{record.get_copy_param(type_info).render_kl() | indent(4)}}
    ) {
    throw "Cannot assign to instance of abstract type {{type_info.kl.name}}()";
}
{%   else %}

{{type_info.kl.name}}.=(
    {{record.get_copy_param(type_info).render_kl() | indent(4)}}
    ) = "{{record.get_simple_ass_op_edk_symbol_name(type_info)}}";
{%   endif %}
{%  endif %}
{% endif %}
{############################################################################}
{% if type_info.is_direct and record.has_casts() %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Casts
//////////////////////////////////////////////////////////////////////////////
{%  for cast in record.casts %}

{%   for comment in cast.comments %}
{{comment}}
{%   endfor %}
{%   if cast.this.type_info.kl.name.base.startswith('Cxx') or cast.get_param(type_info).type_info.kl.name.base.startswith('Cxx') %}
/// \dfgPresetOmit
/// \internal
{%   endif %}
{{cast.this.type_info.kl.name}}(
    {{cast.get_param(type_info).render_kl() | indent(4)}}
    ) = "{{cast.get_edk_symbol_name(type_info)}}";
{%  endfor %}
{% endif %}
{############################################################################}
{% if type_info.is_direct and record.const_deref_kl_method_name %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Const Dereference
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
{{record.const_deref_result.type_info.kl.name}}
{{type_info.kl.name}}.{{record.const_deref_kl_method_name}}(
    ) = "{{record.get_const_deref_edk_symbol_name(type_info)}}";
{% endif %}
{############################################################################}
{% if type_info.is_direct and record.mutable_deref_kl_method_name %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Mutable Dereference
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
{{record.mutable_deref_result.type_info.kl.name}}
{{type_info.kl.name}}.{{record.mutable_deref_kl_method_name}}(
    ) = "{{record.get_mutable_deref_edk_symbol_name(type_info)}}";
{% endif %}
{############################################################################}
{% if record.get_ind_op_result %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
{{record.get_ind_op_result.type_info.kl.name}}
{{type_info.kl.name}}.cxx_getAtIndex(
    {% for param in record.get_ind_op_params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    )
{%  if type_info.is_direct %}
  = "{{record.get_get_ind_op_edk_symbol_name(type_info)}}";
{%  else %}
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of {{type_info.kl.name}}.cxx_getAtIndex on null {{type_info.kl.name}}";
    return {{type_info.direct.render_indirect_to_direct('this')}}->{ {{record.kl_global_name}} }.cxx_getAtIndex(
        {% for param in record.get_ind_op_params %}
        {{param.value_name.kl | indent(4)}}{{"," if not loop.last else ""}}
        {% endfor %}
        );
}
{%  endif %}
{% endif %}
{############################################################################}
{% if record.set_ind_op_params and allow_mutable_methods %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
{{type_info.kl.name}}.cxx_setAtIndex!(
    {% for param in record.set_ind_op_params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    )
{%  if type_info.is_direct %}
  = "{{record.get_set_ind_op_edk_symbol_name(type_info)}}";
{%  else %}
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of {{type_info.kl.name}}.cxx_setAtIndex on null {{type_info.kl.name}}";
    {{type_info.direct.render_indirect_to_direct('this')}}->{ {{record.kl_global_name}} }.cxx_setAtIndex(
        {% for param in record.set_ind_op_params %}
        {{param.value_name.kl | indent(4)}}{{"," if not loop.last else ""}}
        {% endfor %}
        );
}
{%  endif %}
{% endif %}
{############################################################################}
{% if type_info.is_direct and record.has_kls() %}

//////////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Additional KL code
//////////////////////////////////////////////////////////////////////////////
{%  for kl in record.kls %}

{{kl.render(type_info)}}
{%  endfor %}
{% endif %}
{############################################################################}

{% endblock body %}
