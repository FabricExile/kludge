{######################################################################}
{# Copyright (c) 2010-2016, Fabric Software Inc. All rights reserved. #}
{######################################################################}
{% extends "generate/decl/decl.impls.kl" %}
{% block body %}
{% if record.include_getters_setters or not is_direct %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Getters and Setters
////////////////////////////////////////////////////////////////////////
{% for member in record.members %}
{% if member.is_public() %}
{% if member.has_getter() %}
{{member.type_info.kl.name.compound}} {{type_info.kl.name.compound}}.{{member.getter_kl_name}}() = "{{member.get_getter_edk_symbol_name(type_info)}}";
{% endif %}
{% if member.has_setter() and allow_mutable_methods %}
{{type_info.kl.name.compound}}.{{member.setter_kl_name}}!({{member.type_info.kl.name.base}} value{{member.type_info.kl.name.suffix}}) = "{{member.get_setter_edk_symbol_name(type_info)}}";
{% endif %}
{% endif %}

{% endfor %}
{% endif %}
{% if is_direct %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Constructors and Destructor
////////////////////////////////////////////////////////////////////////
{% if record.include_empty_ctor %}
{{type_info.kl.name.compound}}() = "{{record.empty_ctor_edk_symbol_name}}";

{% endif %}
{% if record.include_copy_ctor %}
{{type_info.kl.name.compound}}(
    {{record.get_copy_param(type_info).render_kl() | indent(4)}}
    ) = "{{record.get_copy_ctor_edk_symbol_name(type_info)}}";

{% endif %}
{% for ctor in record.ctors %}
{% for comment in ctor.comments %}
{{comment}}
{% endfor %}
{{type_info.kl.name.compound}}(
    {% for param in ctor.params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    ) = "{{ctor.get_edk_symbol_name(type_info)}}";

{% endfor %}
{% if record.include_dtor %}
~{{type_info.kl.name.compound}}() = "{{record.get_dtor_edk_symbol_name(type_info)}}";

{% endif %}
{% endif %}
{% if record.has_methods() %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Methods
////////////////////////////////////////////////////////////////////////
{% for method in record.methods %}
{% if (method.is_static and allow_static_methods)
    or (method.is_mutable and allow_mutable_methods)
    or (method.is_const and allow_const_methods) %}
{% for comment in method.comments %}
{{comment}}
{% endfor %}
{{method.result.type_info.kl.name.compound}}
{% if method.is_static %}
{{type_info.kl.name.compound}}_{{method.kl_name}}(
{% else %}
{{type_info.kl.name.compound}}.{{method.kl_name}}{{method.this_access_suffix}}(
{% endif %}
    {% for param in method.params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    ) = "{{method.get_edk_symbol_name(type_info)}}";

{% endif %}
{% endfor %}
{% endif %}
{% if is_direct and record.has_uni_ops %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Unary Operators
////////////////////////////////////////////////////////////////////////
{% for uni_op in record.uni_ops %}
{% for comment in uni_op.comments %}
{{comment}}
{% endfor %}
{{uni_op.result.type_info.kl.name.compound}}
{{uni_op.this.type_info.kl.name.compound}}.{{uni_op.kl_method_name}}!(
    ) = "{{uni_op.get_edk_symbol_name(type_info)}}";

{% endfor %}
{% endif %}
{% if is_direct and record.has_bin_ops %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Binary Operators
////////////////////////////////////////////////////////////////////////
{% for bin_op in record.bin_ops %}
{% for comment in bin_op.comments %}
{{comment}}
{% endfor %}
{{bin_op.result.type_info.kl.name.compound}}
{{bin_op.op}}(
    {{bin_op.params[0].render_kl() | indent(4)}},
    {{bin_op.params[1].render_kl() | indent(4)}}
    ) = "{{bin_op.get_edk_symbol_name(type_info)}}";

{% endfor %}
{% endif %}
{% if is_direct and record.has_ass_ops %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Assignment Operators
////////////////////////////////////////////////////////////////////////
{% for ass_op in record.ass_ops %}
{% for comment in ass_op.comments %}
{{comment}}
{% endfor %}
{{ass_op.this.type_info.kl.name.compound}}.{{ass_op.op}}(
    {{ass_op.params[0].render_kl() | indent(4)}}
    ) = "{{ass_op.get_edk_symbol_name(type_info)}}";

{% endfor %}
{% if record.include_simple_ass_op %}
{{type_info.kl.name.compound}}.=(
    {{record.get_copy_param(type_info).render_kl() | indent(4)}}
    ) = "{{record.get_simple_ass_op_edk_symbol_name(type_info)}}";

{% endif %}
{% endif %}
{% if is_direct and record.has_casts() %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Casts
////////////////////////////////////////////////////////////////////////
{% for cast in record.casts %}
{% for comment in cast.comments %}
{{comment}}
{% endfor %}
{{cast.this.type_info.kl.name.compound}}(
    {{cast.params[0].render_kl() | indent(4)}}
    ) = "{{cast.get_edk_symbol_name(type_info)}}";

{% endfor %}
{% endif %}
{% if is_direct and record.deref_kl_method_name %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// Deref
////////////////////////////////////////////////////////////////////////
{{record.deref_result.type_info.kl.name.compound}}
{{record.deref_this.type_info.kl.name.compound}}.{{record.deref_kl_method_name}}(
    ) = "{{record.get_deref_edk_symbol_name(type_info)}}";

{% endif %}
{% if record.get_ind_op_result %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// getAt(Index) Operator
////////////////////////////////////////////////////////////////////////
{{record.get_ind_op_result.type_info.kl.name.compound}}
{{type_info.kl.name.compound}}.getAt(
    {% for param in record.get_ind_op_params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    ) = "{{record.get_get_ind_op_edk_symbol_name(type_info)}}";

{% endif %}
{% if record.set_ind_op_params and allow_mutable_methods %}
////////////////////////////////////////////////////////////////////////
// {{type_info}}
// setAt(Index) Operator
////////////////////////////////////////////////////////////////////////
{{type_info.kl.name.compound}}.setAt(
    {% for param in record.set_ind_op_params %}
    {{param.render_kl() | indent(4)}}{{"," if not loop.last else ""}}
    {% endfor %}
    ) = "{{record.get_set_ind_op_edk_symbol_name(type_info)}}";

{% endif %}
{% endblock body %}
