{############################################################################}
{# Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.        #}
{############################################################################}
{% extends "generate/decl/decl.impls.kl" %}
{% block body %}
{{decl.render_method_impls('kl')}}

////////////////////////////////////////////////////////////////////////
// {{decl.type_info.const_ptr.kl.name}}
// {{decl.type_info.mutable_ptr.kl.name}}
// {{decl.type_info.const_ref.kl.name}}
// {{decl.type_info.mutable_ref.kl.name}}
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////
{% for type_info in decl.type_info.get_indirects() %}

/// \dfgPresetOmit
{{type_info.kl.name}}(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
{{type_info.kl.name}}({{decl.type_info.direct.kl.name}} array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
{{type_info.kl.name}}({{decl.type_info.direct.kl.name}} array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_{{decl.type_info.direct.kl.name}}());
}
{%  if decl.type_info.direct.is_simple or decl.type_info.direct.kl.name.compound == 'Data' %}

/// \dfgPresetOmit
struct Make_{{type_info.kl.name}} permits {{type_info.kl.name}} {
  private Data ptr;
  private {{decl.type_info.direct.kl.name}} value;
};

/// \dfgPresetOmit
Make_{{type_info.kl.name}}({{decl.type_info.direct.kl.name}} value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
Make_{{type_info.kl.name}}(io {{decl.type_info.direct.kl.name}} value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
{{type_info.kl.name}}(Make_{{type_info.kl.name}} maker) {
  this.ptr = maker.ptr;
}
{%  else %}

/// \dfgPresetOmit
{{type_info.kl.name}}({{decl.type_info.direct.kl.name}} value) {
  this.ptr = {{decl.type_info.direct.render_get_underlying_ptr('value')}};
}

/// \dfgPresetOmit
{{type_info.kl.name}} Make_{{type_info.kl.name}}({{decl.type_info.direct.kl.name}} value) {
  return {{type_info.kl.name}}(
    {{decl.type_info.direct.render_get_underlying_ptr('value')}}
    );
}
{%  endif %}
{% endfor %}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
Boolean {{decl.type_info.const_ptr.kl.name}}.cxx_isValid() {
  return !!this.ptr;
}

/// \dfgPresetOmit
Boolean({{decl.type_info.const_ptr.kl.name}} ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
{{decl.type_info.const_ref.kl.name}} {{decl.type_info.const_ptr.kl.name}}.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of {{decl.type_info.const_ptr.kl.name}}.cxx_getAt on null {{decl.type_info.const_ptr.kl.name}}";
  return {{decl.type_info.const_ref.kl.name}}(this.ptr.offset(index * __CxxSize_{{decl.type_info.direct.kl.name}}()));
}

/// Deref the pointer
/// \dfgPresetOmit
{{decl.type_info.const_ref.kl.name}} {{decl.type_info.const_ptr.kl.name}}.cxx_deref() {
  return this.cxx_getAt(0);
}
{% if decl.type_info.direct.kl.name.base == 'CxxChar' %}

/// Given a String, take a pointer to the bytes of the string
/// \dfgPresetOmit
{{decl.type_info.const_ptr.kl.name}}(String s) {
  this.ptr = s.data();
}

/// Convert to a string
/// Note that this can potentially crash.  Converting a {{decl.type_info.const_ptr.kl.name}} to
/// a String is not always safe, just as it is not always safe in C++
/// \dfgPresetOmit
{{decl.type_info.const_ptr.kl.name}}.appendDesc(io String s) {
  Count size = 0;
  while (this.cxx_getAt(size))
    ++size;
  UInt8 bytes<>(this.ptr, size);
  String ss;
  ss.setFrom(bytes);
  s += ss;
}
{% else %}

/// Convert to a string
/// \dfgPresetOmit
{{decl.type_info.const_ptr.kl.name}}.appendDesc(io String s) {
  s += this.ptr;
}
{% endif %}

/// Same as for {{decl.type_info.const_ptr.kl.name}}, but returning a non-const ref
/// \dfgPresetOmit
{{decl.type_info.mutable_ref.kl.name}} {{decl.type_info.mutable_ptr.kl.name}}.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of {{decl.type_info.mutable_ptr.kl.name}}.cxx_getAt on null {{decl.type_info.mutable_ptr.kl.name}}";
  return {{decl.type_info.mutable_ref.kl.name}}(this.ptr.offset(index * __CxxSize_{{decl.type_info.direct.kl.name}}()));
}

/// Same as for {{decl.type_info.const_ptr.kl.name}}, but returning a non-const ref
/// \dfgPresetOmit
{{decl.type_info.mutable_ref.kl.name}} {{decl.type_info.mutable_ptr.kl.name}}.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
{{decl.type_info.mutable_ptr.kl.name}}.cxx_setAt(Index i, {{decl.type_info.direct.kl.name}} v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of {{decl.type_info.mutable_ptr.kl.name}}.cxx_setAt on null {{decl.type_info.mutable_ptr.kl.name}}";
  this.ptr.offset(i)->{ {{decl.type_info.direct.kl.name}} } = v;
}

/// Copy ctor
/// \dfgPresetOmit
{{decl.type_info.const_ref.kl.name}}({{decl.type_info.const_ref.kl.name}} that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
{{decl.type_info.const_ref.kl.name}}.=({{decl.type_info.const_ref.kl.name}} that) {
  this.ptr = that.ptr;
}

/// Get the {{decl.type_info.direct.kl.name}} value
/// \dfgPresetOmit
{{decl.type_info.direct.kl.name}} {{decl.type_info.const_ref.kl.name}}.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of {{decl.type_info.const_ref.kl.name}}.cxx_get on null {{decl.type_info.const_ref.kl.name}}";
  return {{decl.type_info.direct.render_indirect_to_direct('this')}}->{ {{decl.type_info.direct.kl.name}} };
}
{% if decl.type_info.direct.kl.name.base == 'CxxStdString' %}

/// Convert to a string
/// \dfgPresetOmit
{{decl.type_info.const_ref.kl.name}}.appendDesc(io String string) {
  CxxCharConstPtr ptr = this.cxx_c_str();
  string += String(ptr);
}
{% else %}

/// Convert to String
/// \dfgPresetOmit
{{decl.type_info.const_ref.kl.name}}.appendDesc(io String s) {
  s += this.cxx_get();
}
{% endif %}
{% if decl.type_info.direct.is_simple and decl.type_info.direct.kl.name.base != 'Boolean' %}

/// Convert to Boolean
/// \dfgPresetOmit
Boolean({{decl.type_info.const_ref.kl.name}} ref) {
  this = Boolean(ref.cxx_get());
}
{% endif %}

/// Set the value
/// \dfgPresetOmit
{{decl.type_info.mutable_ref.kl.name}}.cxx_set({{decl.type_info.direct.kl.name}} value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of {{decl.type_info.mutable_ref.kl.name}}.cxx_set on null {{decl.type_info.mutable_ref.kl.name}}";
  {{decl.type_info.direct.render_indirect_to_direct('this')}}->{ {{decl.type_info.direct.kl.name}} } = value;
}

/// Assignment of {{decl.type_info.direct.kl.name}}
/// \dfgPresetOmit
{{decl.type_info.mutable_ref.kl.name}}.=({{decl.type_info.direct.kl.name}} value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
{{decl.type_info.mutable_ref.kl.name}}.appendDesc(io String s) {
  s += this.cxx_get();
}
{% if decl.type_info.direct.kl.name.compound == 'CxxStdString' %}

/// \dfgPresetOmit
{{decl.type_info.const_ref.kl.name}}(String string) {
  this.values.push({{decl.type_info.direct.kl.name}}(string));
  this.ptr = {{decl.type_info.direct.render_get_underlying_ptr('this.values[0]')}};
}
{% endif %}
{% endblock body %}
